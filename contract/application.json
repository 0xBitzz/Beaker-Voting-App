{
    "hints": {},
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSA1CmJ5dGVjYmxvY2sgMHg3NjZmNzQ2NTVmNjE2ZDZmNzU2ZTc0IDB4NzY2Zjc0NjU1ZjYzNmY3NTZlNzQgMHg3NjZmNzQ2NTVmNjM2ODZmNjk2MzY1IDB4NzI2NTY3NWY2MjY1Njc2OTZlIDB4NzI2NTY3NWY2NTZlNjQgMHg3OTY1NzMgMHg3NjZmNzQ2NTVmNjI2NTY3Njk2ZSAweDc2NmY3NDY1NWY2NTZlNjQgMHgKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgyZmY1NzRlOSAvLyAiY3JlYXRlKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGQxYmQyNzM2IC8vICJjYXN0X3ZvdGUoc3RyaW5nKXZvaWQiCj09CmJueiBtYWluX2w2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MWQ1OTg3ZGIgLy8gInVwdm90ZSgpdm9pZCIKPT0KYm56IG1haW5fbDUKZXJyCm1haW5fbDU6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgdXB2b3RlXzUKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDY6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKY2FsbHN1YiBjYXN0dm90ZV80CmludGNfMSAvLyAxCnJldHVybgptYWluX2w3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKc3RvcmUgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKc3RvcmUgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmJ0b2kKc3RvcmUgMgp0eG5hIEFwcGxpY2F0aW9uQXJncyA0CmJ0b2kKc3RvcmUgMwpsb2FkIDAKbG9hZCAxCmxvYWQgMgpsb2FkIDMKY2FsbHN1YiBjcmVhdGVfMwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzEgLy8gT3B0SW4KPT0KYm56IG1haW5fbDEyCnR4biBPbkNvbXBsZXRpb24KcHVzaGludCAyIC8vIENsb3NlT3V0Cj09CmJueiBtYWluX2wxMQplcnIKbWFpbl9sMTE6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIGRvd252b3RlXzIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEyOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiByZWdpc3Rlcl8wCmludGNfMSAvLyAxCnJldHVybgoKLy8gcmVnaXN0ZXIKcmVnaXN0ZXJfMDoKZ2xvYmFsIFJvdW5kCmJ5dGVjXzMgLy8gInJlZ19iZWdpbiIKYXBwX2dsb2JhbF9nZXQKPj0KZ2xvYmFsIFJvdW5kCmJ5dGVjIDQgLy8gInJlZ19lbmQiCmFwcF9nbG9iYWxfZ2V0Cjw9CiYmCmFzc2VydAp0eG4gU2VuZGVyCmJ5dGVjXzAgLy8gInZvdGVfYW1vdW50IgppbnRjXzAgLy8gMAphcHBfbG9jYWxfcHV0CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAidm90ZV9jaG9pY2UiCmJ5dGVjIDggLy8gIiIKYXBwX2xvY2FsX3B1dApyZXRzdWIKCi8vIGF1dGhfb3B0ZWRfaW4KYXV0aG9wdGVkaW5fMToKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECmFwcF9vcHRlZF9pbgpyZXRzdWIKCi8vIGRvd252b3RlCmRvd252b3RlXzI6CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAidm90ZV9jaG9pY2UiCmFwcF9sb2NhbF9nZXQKYnl0ZWMgNSAvLyAieWVzIgo9PQpieiBkb3dudm90ZV8yX2wyCmJ5dGVjXzEgLy8gInZvdGVfY291bnQiCmJ5dGVjXzEgLy8gInZvdGVfY291bnQiCmFwcF9nbG9iYWxfZ2V0CnR4biBTZW5kZXIKYnl0ZWNfMCAvLyAidm90ZV9hbW91bnQiCmFwcF9sb2NhbF9nZXQKLQphcHBfZ2xvYmFsX3B1dAp0eG4gU2VuZGVyCmJ5dGVjXzAgLy8gInZvdGVfYW1vdW50IgppbnRjXzAgLy8gMAphcHBfbG9jYWxfcHV0CmRvd252b3RlXzJfbDI6CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAidm90ZV9jaG9pY2UiCmJ5dGVjIDggLy8gIiIKYXBwX2xvY2FsX3B1dApyZXRzdWIKCi8vIGNyZWF0ZQpjcmVhdGVfMzoKc3RvcmUgNwpzdG9yZSA2CnN0b3JlIDUKc3RvcmUgNApieXRlY18zIC8vICJyZWdfYmVnaW4iCmxvYWQgNAphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJyZWdfZW5kIgpsb2FkIDUKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNiAvLyAidm90ZV9iZWdpbiIKbG9hZCA2CmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDcgLy8gInZvdGVfZW5kIgpsb2FkIDcKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAidm90ZV9jb3VudCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMyAvLyAicmVnX2JlZ2luIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJyZWdfZW5kIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyA2IC8vICJ2b3RlX2JlZ2luIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlYyA3IC8vICJ2b3RlX2VuZCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBjYXN0X3ZvdGUKY2FzdHZvdGVfNDoKc3RvcmUgOAp0eG4gU2VuZGVyCmNhbGxzdWIgYXV0aG9wdGVkaW5fMQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CnR4biBTZW5kZXIKaW50Y18yIC8vIDUKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDEwCnN0b3JlIDkKZ2xvYmFsIFJvdW5kCmJ5dGVjIDYgLy8gInZvdGVfYmVnaW4iCmFwcF9nbG9iYWxfZ2V0Cj49Ci8vIEVuc3VyZSB0aGF0IHZvdGluZyBjYW4gb25seSB0YWtlIHBsYWNlIHdpdGhpbiB2b3Rpbmcgd2luZG93CmFzc2VydApnbG9iYWwgUm91bmQKYnl0ZWMgNyAvLyAidm90ZV9lbmQiCmFwcF9nbG9iYWxfZ2V0Cjw9Ci8vIEVuc3VyZSB0aGF0IHZvdGluZyBjYW4gb25seSB0YWtlIHBsYWNlIHdpdGhpbiB2b3Rpbmcgd2luZG93CmFzc2VydApsb2FkIDEwCi8vIEVuc3VyZSBhY2NvdW50IGhhcyBvcHRlZCBpbnRvIHRoZSBFTkIKYXNzZXJ0CmxvYWQgOQpwdXNoaW50IDEwMDAgLy8gMTAwMAo+PQphc3NlcnQKbG9hZCA4CmV4dHJhY3QgMiAwCnB1c2hieXRlcyAweDYxNjI3Mzc0NjE2OTZlIC8vICJhYnN0YWluIgo9PQpsb2FkIDgKZXh0cmFjdCAyIDAKcHVzaGJ5dGVzIDB4NmU2ZiAvLyAibm8iCj09Cnx8CmxvYWQgOApleHRyYWN0IDIgMApieXRlYyA1IC8vICJ5ZXMiCj09Cnx8CmFzc2VydAp0eG4gU2VuZGVyCmJ5dGVjXzIgLy8gInZvdGVfY2hvaWNlIgpsb2FkIDgKZXh0cmFjdCAyIDAKYXBwX2xvY2FsX3B1dApsb2FkIDgKZXh0cmFjdCAyIDAKYnl0ZWMgNSAvLyAieWVzIgo9PQpieiBjYXN0dm90ZV80X2wyCnR4biBTZW5kZXIKaW50Y18yIC8vIDUKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDEyCnN0b3JlIDExCnR4biBTZW5kZXIKYnl0ZWNfMCAvLyAidm90ZV9hbW91bnQiCmxvYWQgMTEKYXBwX2xvY2FsX3B1dApieXRlY18xIC8vICJ2b3RlX2NvdW50IgpieXRlY18xIC8vICJ2b3RlX2NvdW50IgphcHBfZ2xvYmFsX2dldAp0eG4gU2VuZGVyCmJ5dGVjXzAgLy8gInZvdGVfYW1vdW50IgphcHBfbG9jYWxfZ2V0CisKYXBwX2dsb2JhbF9wdXQKY2FzdHZvdGVfNF9sMjoKcmV0c3ViCgovLyB1cHZvdGUKdXB2b3RlXzU6CnR4biBTZW5kZXIKaW50Y18yIC8vIDUKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDE0CnN0b3JlIDEzCnR4biBTZW5kZXIKYnl0ZWNfMCAvLyAidm90ZV9hbW91bnQiCmxvYWQgMTMKYXBwX2xvY2FsX3B1dApieXRlY18xIC8vICJ2b3RlX2NvdW50IgpieXRlY18xIC8vICJ2b3RlX2NvdW50IgphcHBfZ2xvYmFsX2dldAp0eG4gU2VuZGVyCmJ5dGVjXzAgLy8gInZvdGVfYW1vdW50IgphcHBfbG9jYWxfZ2V0CisKYXBwX2dsb2JhbF9wdXQKcmV0c3Vi",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAKYnl0ZWNibG9jayAweDc2NmY3NDY1NWY2MzY4NmY2OTYzNjUgMHg3NjZmNzQ2NTVmNjM2Zjc1NmU3NCAweDc2NmY3NDY1NWY2MTZkNmY3NTZlNzQKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDIKZXJyCm1haW5fbDI6CmNhbGxzdWIgZG93bnZvdGVfMApwdXNoaW50IDEgLy8gMQpyZXR1cm4KCi8vIGRvd252b3RlCmRvd252b3RlXzA6CnR4biBTZW5kZXIKYnl0ZWNfMCAvLyAidm90ZV9jaG9pY2UiCmFwcF9sb2NhbF9nZXQKcHVzaGJ5dGVzIDB4Nzk2NTczIC8vICJ5ZXMiCj09CmJ6IGRvd252b3RlXzBfbDIKYnl0ZWNfMSAvLyAidm90ZV9jb3VudCIKYnl0ZWNfMSAvLyAidm90ZV9jb3VudCIKYXBwX2dsb2JhbF9nZXQKdHhuIFNlbmRlcgpieXRlY18yIC8vICJ2b3RlX2Ftb3VudCIKYXBwX2xvY2FsX2dldAotCmFwcF9nbG9iYWxfcHV0CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAidm90ZV9hbW91bnQiCmludGNfMCAvLyAwCmFwcF9sb2NhbF9wdXQKZG93bnZvdGVfMF9sMjoKdHhuIFNlbmRlcgpieXRlY18wIC8vICJ2b3RlX2Nob2ljZSIKcHVzaGJ5dGVzIDB4IC8vICIiCmFwcF9sb2NhbF9wdXQKcmV0c3Vi"
    },
    "schema": {
        "local": {
            "declared": {
                "vote_amount": {
                    "type": "uint64",
                    "key": "vote_amount",
                    "descr": "Amount an account holds at voting time"
                },
                "vote_choice": {
                    "type": "bytes",
                    "key": "vote_choice",
                    "descr": "Choice made by this account, can be either of yes, no, abstain"
                }
            },
            "reserved": {}
        },
        "global": {
            "declared": {
                "vote_count": {
                    "type": "uint64",
                    "key": "vote_count",
                    "descr": "The accumulated number of votes"
                },
                "reg_begin": {
                    "type": "uint64",
                    "key": "reg_begin",
                    "descr": "Registration window begin time"
                },
                "reg_end": {
                    "type": "uint64",
                    "key": "reg_end",
                    "descr": "Registration window end time"
                },
                "vote_begin": {
                    "type": "uint64",
                    "key": "vote_begin",
                    "descr": "Voting window start time"
                },
                "vote_end": {
                    "type": "uint64",
                    "key": "vote_end",
                    "descr": "Voting window end time"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "VotingApp",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "uint64",
                        "name": "reg_begin"
                    },
                    {
                        "type": "uint64",
                        "name": "reg_end"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_begin"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_end"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "cast_vote",
                "args": [
                    {
                        "type": "string",
                        "name": "vote_choice"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "upvote",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    }
}